*skel.vim.txt*	Template file functionality for Vim 	Last Change: 2020-03-31

==============================================================================
CONTENTS                                                       *skel-contents*

    1. Overview ................... |skel-overview|
    2. Template Files ............. |skel-template-files|
    3. Options .................... |skel-options|
    4. Commands ................... |skel-commands|
    5. Autocmds ................... |skel-autocmds|
    6. About ...................... |skel-about|


==============================================================================
OVERVIEW                                                       *skel-overview*

skel.vim is a small and simple plugin for populating new buffers with
user-provided skeleton files. I originally called it a one-page plugin, but
it's grown slightly past that since I refined some functions.

skel.vim provides one command, |:SkelLoad|, and loads one autocmd. There are
only two options, one of which only sets the verbosity of the script. What
templates are loaded should be set depending on the order of the
'runtimepath'.

The heavy lifting for the plugin is done by |skel-autocmds|, but the same
basic functionality also underlays the ex command. When invoked, either by
entering a new empty buffer or via command, skel.vim will use 'filetype' (or
the user provided string) to determine what template file to look for. E.g.,
a 'filetype' set to python means that a `python.skel` file is looked for.
Then, the 'runtimepath' is searched in reverse order, and the first template
file found with the glob `templates/*.skel` is copied into the buffer.

skel.vim thus respects the user's `after/` folder so if some plugin or
administrator has set up template files, the user can override them.

A comment on naming: The original concept was `skeleton.vim`, but the plugin
ended up being so bare-bones, it was shortened!


==============================================================================
TEMPLATE FILES                                           *skel-template-files*

skel.vim looks for files with the glob `templates/*.skel` extension in your
'runtimepath'. Files should be named according to the 'filetype', e.g. text
file skeletons are in a file called `text.skel`.

No interpretation of template files is done, aside from the |g:skel_sigil|
which may optionally be included in template files to place the cursor in
a specific location after loading. The sigil itself will be removed. If no
sigil is provided, the cursor will go at the end of the buffer.

An example template file for python is below:

>
	#!/usr/bin/env python3

	def main(args):
		@@ # <- cursor will go here, even leaving the comment intact!

	if __name__ == "__main__":
		import sys
		main(sys.argv)
<
Place in ~/vimfiles/templates/python.skel


==============================================================================
OPTIONS                                                         *skel-options*

If the user changes any of the variables used by skel.vim, the change will
take effect immediately, meaning that the plugin does not have to be reloaded.

g:skel_sigil                                                    *g:skel_sigil*

  Type: |String|
  Default: `'@@'`

  This is an sigil that can optionally be placed in your template files to
  indicate where the cursor should start. When a template is loaded, the first
  instance of this string will be removed and the cursor will be placed where
  it was. For an example usage, see the python template file shown in
  |skel-template-files|.

  The string `'@@'` was choosen as it is used very rarely in programming
  languages. If you change this from its default value, be wary of escape
  sequences - skel.vim does not escape this before using it as a search
  pattern, which may lead to unexpected results.

g:skel_verbose                                                *g:skel_verbose*

  Type: |Number|
  Default: `0`

  Enables some extra messaging. The author recommends only using it for
  debugging purposes, as the additional messages tend to cause more friction
  creating buffers due to extra |hit-enter| prompts.


==============================================================================
COMMANDS                                                           *skel-cmds*

                                                              *skel-:SkelLoad*
:SkelLoad[!] {template}      With no {template}, will try to load a template
                             file matching the 'filetype' of the current
                             buffer. With {template}, will load specified
                             template file. This command supports
                             autocompletion. A bang will force the reading of
                             a template file even if the buffer is non-empty.


==============================================================================
AUTOCMDS                                                       *skel-autocmds*

skel.vim creates one augroup , titled `skel`, which has one call to the buffer
population function on the |BufNewFile| event. This version of the command
will never be forced, if that is desired, use |:SkelLoad| with a bang.

This autocmd is the most core part of skel.vim's operation. Every time a new
buffer is created, skel.vim will look through the available template files to
see if any match the 'filetype', and loaded if found. For more details, see
|skel-overview|.


==============================================================================
ABOUT                                                             *skel-about*

skel.vim is maintained by Cameron Rossington, and lives here:

http://github.com/deoxys314/skel.vim

 vim:tw=78:et:ft=help:norl:
